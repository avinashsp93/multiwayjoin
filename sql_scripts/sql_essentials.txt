# CREATE TABLES

#R1
CREATE TABLE region (
	R_REGIONKEY	int PRIMARY KEY,
	R_NAME		CHAR(25),
	R_COMMENT	VARCHAR(152)
);

#R2
CREATE TABLE nation (
	N_NATIONKEY		int PRIMARY KEY,
	N_NAME			CHAR(25),
	N_REGIONKEY		BIGINT NOT NULL,  -- references R_REGIONKEY
	N_COMMENT		VARCHAR(152)
);

#R3
CREATE TABLE part (

	P_PARTKEY		int PRIMARY KEY,
	P_NAME			VARCHAR(55),
	P_MFGR			CHAR(25),
	P_BRAND			CHAR(10),
	P_TYPE			VARCHAR(25),
	P_SIZE			INTEGER,
	P_CONTAINER		CHAR(10),
	P_RETAILPRICE	DECIMAL,
	P_COMMENT		VARCHAR(23)
);

#R4
CREATE TABLE supplier (
	S_SUPPKEY		int PRIMARY KEY,
	S_NAME			CHAR(25),
	S_ADDRESS		VARCHAR(40),
	S_NATIONKEY		BIGINT NOT NULL, -- references N_NATIONKEY
	S_PHONE			CHAR(15),
	S_ACCTBAL		DECIMAL,
	S_COMMENT		VARCHAR(101)
);

#R5
CREATE TABLE customer (
	C_CUSTKEY		int PRIMARY KEY,
	C_NAME			VARCHAR(25),
	C_ADDRESS		VARCHAR(40),
	C_NATIONKEY		BIGINT NOT NULL, -- references N_NATIONKEY
	C_PHONE			CHAR(15),
	C_ACCTBAL		DECIMAL,
	C_MKTSEGMENT	CHAR(10),
	C_COMMENT		VARCHAR(117)
);

#R6
CREATE TABLE orders (
	O_ORDERKEY		int PRIMARY KEY,
	O_CUSTKEY		BIGINT NOT NULL, -- references C_CUSTKEY
	O_ORDERSTATUS	CHAR(1),
	O_TOTALPRICE	DECIMAL,
	O_ORDERDATE		DATE,
	O_ORDERPRIORITY	CHAR(15),
	O_CLERK			CHAR(15),
	O_SHIPPRIORITY	INTEGER,
	O_COMMENT		VARCHAR(79)
);

#R7
CREATE TABLE partsupp (
	PS_PARTKEY		BIGINT NOT NULL, -- references P_PARTKEY
	PS_SUPPKEY		BIGINT NOT NULL, -- references S_SUPPKEY
	PS_AVAILQTY		INTEGER,
	PS_SUPPLYCOST	DECIMAL,
	PS_COMMENT		VARCHAR(199),
	PRIMARY KEY (PS_PARTKEY, PS_SUPPKEY)
);

#R8
CREATE TABLE lineitem (
	L_ORDERKEY		BIGINT NOT NULL, -- references O_ORDERKEY
	L_PARTKEY		BIGINT NOT NULL, -- references P_PARTKEY (compound fk to PARTSUPP)
	L_SUPPKEY		BIGINT NOT NULL, -- references S_SUPPKEY (compound fk to PARTSUPP)
	L_LINENUMBER	INTEGER,
	L_QUANTITY		DECIMAL,
	L_EXTENDEDPRICE	DECIMAL,
	L_DISCOUNT		DECIMAL,
	L_TAX			DECIMAL,
	L_RETURNFLAG	CHAR(1),
	L_LINESTATUS	CHAR(1),
	L_SHIPDATE		DATE,
	L_COMMITDATE	DATE,
	L_RECEIPTDATE	DATE,
	L_SHIPINSTRUCT	CHAR(25),
	L_SHIPMODE		CHAR(10),
	L_COMMENT		VARCHAR(44),
	PRIMARY KEY (L_ORDERKEY, L_LINENUMBER)
);







# TO LOAD THE DATA FROM TPCH TO WORKBENCH

LOAD DATA CONCURRENT INFILE 'D:\TPCH_1GB\\region.tbl'
INTO TABLE region
FIELDS TERMINATED BY '|' 
LINES TERMINATED BY '\n';

LOAD DATA CONCURRENT INFILE 'D:\TPCH_1GB\\nation.tbl'
INTO TABLE nation
FIELDS TERMINATED BY '|' 
LINES TERMINATED BY '\n';

LOAD DATA CONCURRENT INFILE 'D:\TPCH_1GB\\part.tbl'
INTO TABLE part 
FIELDS TERMINATED BY '|' 
LINES TERMINATED BY '\n';

LOAD DATA CONCURRENT INFILE 'D:\TPCH_1GB\\supplier.tbl'
INTO TABLE supplier
FIELDS TERMINATED BY '|' 
LINES TERMINATED BY '\n';

LOAD DATA CONCURRENT INFILE 'D:\TPCH_1GB\\customer.tbl'
INTO TABLE customer
FIELDS TERMINATED BY '|' 
LINES TERMINATED BY '\n';

LOAD DATA CONCURRENT INFILE 'D:\TPCH_1GB\\order.tbl'
INTO TABLE orders
FIELDS TERMINATED BY '|' 
LINES TERMINATED BY '\n';

LOAD DATA CONCURRENT INFILE 'D:\TPCH_1GB\\partsupp.tbl'
INTO TABLE partsupp 
FIELDS TERMINATED BY '|' 
LINES TERMINATED BY '\n';

LOAD DATA CONCURRENT INFILE 'D:\TPCH_1GB\\lineitem.tbl'
INTO TABLE lineitem
FIELDS TERMINATED BY '|' 
LINES TERMINATED BY '\n';



# R1
# REGION


# DROP TABLE ALIGNED_REGION;

CREATE TABLE ALIGNED_REGION
SELECT * FROM REGION;

ALTER TABLE ALIGNED_REGION ADD R1_SID
INTEGER PRIMARY KEY AUTO_INCREMENT;




# R1 -> R2
# REGION -> NATION

DROP TABLE ALIGNED_REGION_NATION;

SELECT @n:=0;

CREATE TABLE ALIGNED_REGION_NATION
SELECT ALIGNED_REGION.R1_SID, NATION.*
FROM ALIGNED_REGION
RIGHT JOIN NATION ON ALIGNED_REGION.R_REGIONKEY = NATION.N_REGIONKEY
ORDER BY ALIGNED_REGION.R1_SID;

ALTER TABLE ALIGNED_REGION_NATION ADD R2_SID INTEGER;

UPDATE ALIGNED_REGION_NATION
SET R2_SID = @n := @n + 1;

ALTER TABLE ALIGNED_REGION_NATION ADD PRIMARY KEY(N_NATIONKEY);
ALTER TABLE ALIGNED_REGION_NATION ADD KEY(R1_SID);
ALTER TABLE ALIGNED_REGION_NATION ADD UNIQUE KEY(R2_SID);




# R2 -> R4
# NATION -> SUPPLIER

DROP TABLE ALIGNED_NATION_SUPPLIER;

SELECT @n:=0;

CREATE TABLE ALIGNED_NATION_SUPPLIER
SELECT ALIGNED_REGION_NATION.R2_SID, SUPPLIER.*
FROM ALIGNED_REGION_NATION
RIGHT JOIN SUPPLIER ON ALIGNED_REGION_NATION.N_NATIONKEY = SUPPLIER.S_NATIONKEY
ORDER BY ALIGNED_REGION_NATION.R2_SID;

ALTER TABLE ALIGNED_NATION_SUPPLIER ADD R4_SID INTEGER;

UPDATE ALIGNED_NATION_SUPPLIER
SET R4_SID = @n := @n + 1;

ALTER TABLE ALIGNED_NATION_SUPPLIER ADD PRIMARY KEY(S_SUPPKEY);
ALTER TABLE ALIGNED_NATION_SUPPLIER  ADD KEY(R2_SID);
ALTER TABLE ALIGNED_NATION_SUPPLIER ADD UNIQUE KEY(R4_SID);





# R2 -> R5
# NATION -> CUSTOMER

DROP TABLE ALIGNED_NATION_CUSTOMER;

SELECT @n:=0;

CREATE TABLE ALIGNED_NATION_CUSTOMER
SELECT ALIGNED_REGION_NATION.R2_SID, CUSTOMER.*
FROM ALIGNED_REGION_NATION
RIGHT JOIN CUSTOMER ON ALIGNED_REGION_NATION.N_NATIONKEY = CUSTOMER.C_NATIONKEY
ORDER BY ALIGNED_REGION_NATION.R2_SID;

ALTER TABLE ALIGNED_NATION_CUSTOMER ADD R5_SID INTEGER;

UPDATE ALIGNED_NATION_CUSTOMER
SET R5_SID = @n := @n + 1;

ALTER TABLE ALIGNED_NATION_CUSTOMER ADD PRIMARY KEY(C_CUSTKEY);
ALTER TABLE ALIGNED_NATION_CUSTOMER  ADD KEY(R2_SID);
ALTER TABLE ALIGNED_NATION_CUSTOMER ADD UNIQUE KEY(R5_SID);





# R3
# PART

# DROP TABLE ALIGNED_PART;

CREATE TABLE ALIGNED_PART
SELECT * FROM PART;

ALTER TABLE ALIGNED_PART ADD R3_SID
INTEGER PRIMARY KEY AUTO_INCREMENT;





# R3 -> R7
# PART -> PARTSUPP

DROP TABLE ALIGNED_PART_PARTSUPP;

SELECT @n:=0;

CREATE TABLE ALIGNED_PART_PARTSUPP
SELECT ALIGNED_PART.R3_SID, PARTSUPP.*
FROM ALIGNED_PART
RIGHT JOIN PARTSUPP ON ALIGNED_PART.P_PARTKEY = PARTSUPP.PS_PARTKEY
ORDER BY ALIGNED_PART.R3_SID;

ALTER TABLE ALIGNED_PART_PARTSUPP ADD R7_SID INTEGER;

UPDATE ALIGNED_PART_PARTSUPP
SET R7_SID = @n := @n + 1;

ALTER TABLE ALIGNED_PART_PARTSUPP ADD PRIMARY KEY(PS_PARTKEY, PS_SUPPKEY);
ALTER TABLE ALIGNED_PART_PARTSUPP ADD KEY(R3_SID);
ALTER TABLE ALIGNED_PART_PARTSUPP ADD UNIQUE KEY(R7_SID);




# R3 ->  R8
# PART -> LINEITEM

DROP TABLE ALIGNED_PART_LINEITEM;

SELECT @n:=0;

CREATE TABLE ALIGNED_PART_LINEITEM
SELECT ALIGNED_PART.R3_SID, LINEITEM.*
from ALIGNED_PART
RIGHT JOIN LINEITEM ON ALIGNED_PART.P_PARTKEY = LINEITEM.L_PARTKEY
ORDER BY ALIGNED_PART.R3_SID;

ALTER TABLE ALIGNED_PART_LINEITEM ADD R8_SID INTEGER;

UPDATE ALIGNED_PART_LINEITEM
SET R8_SID = @n := @n + 1;

ALTER TABLE ALIGNED_PART_LINEITEM ADD PRIMARY KEY(L_ORDERKEY, L_LINENUMBER);
ALTER TABLE ALIGNED_PART_LINEITEM ADD KEY(R3_SID);
ALTER TABLE ALIGNED_PART_LINEITEM ADD UNIQUE KEY(R8_SID);




# R4 -> R7
# SUPPLIER -> PARTSUPP

DROP TABLE ALIGNED_SUPPLIER_PARTSUPP;

SELECT @n:=0;

CREATE TABLE ALIGNED_SUPPLIER_PARTSUPP
SELECT ALIGNED_NATION_SUPPLIER.R4_SID, PARTSUPP.*
from ALIGNED_NATION_SUPPLIER
RIGHT JOIN PARTSUPP ON ALIGNED_NATION_SUPPLIER.S_SUPPKEY = PARTSUPP.PS_SUPPKEY
ORDER BY ALIGNED_NATION_SUPPLIER.R4_SID;

ALTER TABLE ALIGNED_SUPPLIER_PARTSUPP ADD R7_SID INTEGER;

UPDATE ALIGNED_SUPPLIER_PARTSUPP
SET R7_SID = @n := @n + 1;

ALTER TABLE ALIGNED_SUPPLIER_PARTSUPP ADD PRIMARY KEY(PS_PARTKEY, PS_SUPPKEY);
ALTER TABLE ALIGNED_SUPPLIER_PARTSUPP ADD KEY(R4_SID);
ALTER TABLE ALIGNED_SUPPLIER_PARTSUPP ADD UNIQUE KEY(R7_SID);




# R4 ->  R8
# SUPPLIER -> LINEITEM

DROP TABLE ALIGNED_SUPPLIER_LINEITEM;

SELECT @n:=0;

CREATE TABLE ALIGNED_SUPPLIER_LINEITEM
SELECT ALIGNED_NATION_SUPPLIER.R4_SID, LINEITEM.*
from ALIGNED_NATION_SUPPLIER
RIGHT JOIN LINEITEM ON ALIGNED_NATION_SUPPLIER.S_SUPPKEY = LINEITEM.L_SUPPKEY
ORDER BY ALIGNED_NATION_SUPPLIER.R4_SID;

ALTER TABLE ALIGNED_SUPPLIER_LINEITEM ADD R8_SID INTEGER;

UPDATE ALIGNED_SUPPLIER_LINEITEM
SET R8_SID = @n := @n + 1;

ALTER TABLE ALIGNED_SUPPLIER_LINEITEM ADD PRIMARY KEY(L_ORDERKEY, L_LINENUMBER);
ALTER TABLE ALIGNED_SUPPLIER_LINEITEM ADD KEY(R4_SID);
ALTER TABLE ALIGNED_SUPPLIER_LINEITEM ADD UNIQUE KEY(R8_SID);




# R5 -> R6
# CUSTOMER -> ORDERS

DROP TABLE ALIGNED_CUSTOMER_ORDERS;

SELECT @n:=0;

CREATE TABLE ALIGNED_CUSTOMER_ORDERS
SELECT ALIGNED_NATION_CUSTOMER.R5_SID, ORDERS.*
FROM ALIGNED_NATION_CUSTOMER
RIGHT JOIN ORDERS ON ALIGNED_NATION_CUSTOMER.C_CUSTKEY = ORDERS.O_CUSTKEY
ORDER BY ALIGNED_NATION_CUSTOMER.R5_SID;

ALTER TABLE ALIGNED_CUSTOMER_ORDERS ADD R6_SID INTEGER;

UPDATE ALIGNED_CUSTOMER_ORDERS
SET R6_SID = @n := @n + 1;

ALTER TABLE ALIGNED_CUSTOMER_ORDERS ADD PRIMARY KEY(O_ORDERKEY);
ALTER TABLE ALIGNED_CUSTOMER_ORDERS ADD KEY(R5_SID);
ALTER TABLE ALIGNED_CUSTOMER_ORDERS ADD UNIQUE KEY(R6_SID);




# R6 ->  R8
# ORDERS -> LINEITEM

SELECT @n:=0;

# DROP TABLE ALIGNED_ORDERS_LINEITEM;

CREATE TABLE ALIGNED_ORDERS_LINEITEM
SELECT ALIGNED_CUSTOMER_ORDERS.R6_SID, LINEITEM.*
from ALIGNED_CUSTOMER_ORDERS
RIGHT JOIN LINEITEM ON ALIGNED_CUSTOMER_ORDERS.O_ORDERKEY = LINEITEM.L_ORDERKEY
ORDER BY ALIGNED_CUSTOMER_ORDERS.R6_SID;

ALTER TABLE ALIGNED_ORDERS_LINEITEM ADD R8_SID INTEGER;

UPDATE ALIGNED_ORDERS_LINEITEM
SET R8_SID = @n := @n + 1;

ALTER TABLE ALIGNED_ORDERS_LINEITEM ADD PRIMARY KEY(L_ORDERKEY, L_LINENUMBER);
ALTER TABLE ALIGNED_ORDERS_LINEITEM ADD KEY(R6_SID);
ALTER TABLE ALIGNED_ORDERS_LINEITEM ADD UNIQUE KEY(R8_SID);